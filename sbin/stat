busyboxctions

# partition card
PartitionSdCard

# upgrade fs if necessary
UpgradeExt "$EXTFS"

# say goodbye and show print output
ShowCardInfo
wapSize() {

	SWAPTEST=
	
	while [ -z "$SWAPTEST" ]
	do
		echo
		echo -n "swap partition size [default=$SWAPSIZE]: "
		read SWAPRESP
		
		[ -z "$SWAPRESP" ] && SWAPRESP="$SWAPSIZE"
		echo "$SWAPRESP" > /dev/null 2>&1 >>"$LOGFILE"
		
		ValidateSizeArg "$SWAPRESP"
		SWAPTEST="$FUNC_RET"
		[ -n "$SWAPTEST" ] && [ $SWAPTEST -gt $SDSIZE ] && ShowMessage "$SWAPRESP > available space($(($SDSIZE))M)." && SWAPTEST=
	done
	
	SWAPSIZE=$SWAPTEST
	
}

GetExtSize() {

	EXTTEST=
	
	while [ -z "$EXTTEST" ]
	do
		echo
		echo -n "ext partition size [default=$EXTSIZE]: "
		read EXTRESP
		
		[ -z "$EXTRESP" ] && EXTRESP="$EXTSIZE"
		echo "$EXTRESP" > /dev/null 2>&1 >>"$LOGFILE"
		
		ValidateSizeArg "$EXTRESP"
		EXTTEST="$FUNC_RET"
		
		[ -n "$EXTTEST" ] && [ $EXTTEST -gt $(($SDSIZE - $SWAPSIZE)) ] && ShowMessage "$EXTRESP > available space($(($SDSIZE - $SWAPSIZE))M)." && EXTTEST=
	done
	
	EXTSIZE=$EXTTEST
	
}

GetExtType() {

	FSTEST=
	
	while [ -z "$FSTEST" ]
	do
		echo
		echo -n "ext partition type [default=$EXTFS]: "
		read FSRESP
		
		[ -z "$FSRESP" ] && FSRESP="$EXTFS"
		echo "$FSRESP" > /dev/null 2>&1 >>"$LOGFILE"
		
		ValidateExtArg "$FSRESP"
		FSTEST="$FUNC_RET"
	done
	
	EXTFS="$FSTEST"
	
}

GetFatSize() {

	FATTEST=
	
	while [ -z "$FATTEST" ]
	do
		echo
		echo -n "fat partition size [default=$FATSIZE]: "
		read FATRESP
		
		[ -z "$FATRESP" ] && FATRESP="$FATSIZE"
		echo "$FATRESP" > /dev/null 2>&1 >>"$LOGFILE"
		
		ValidateSizeArg "$FATRESP"
		FATTEST="$FUNC_RET"
		
		[ -n "$FATTEST" ] && [ $FATTEST -gt $FATSIZE ] && ShowMessage "$FATRESP > available space($(($SDSIZE - $SWAPSIZE - $EXTSIZE))M)." && FATTEST=
		[ -n "$FATTEST" ] && [ $FATTEST -le 0 ] && ShowMessage "must have a fat32 partition greater than 0MB" && FATTEST=
	done
	
	FATSIZE=$FATTEST
	
}


SCRIPTNAME="sdparted"
SCRIPTREV="0.6"
MYNAME="51dusty"

IMODE=
SILENTRUN=
CREATEPART=
FUNC_RET=

UEXTFSONLY=
DEXTFSONLY=

TTISOK=
TTISLOOP=
TTISMSDOS=

SDSIZE=
SDSIZEMB=
SDINFO=$(cat /etc/fstab | grep /sdcard | awk '{print $1}')
if [ -L "$SDINFO" ]
then
	SDPATH=$(ls -l $SDINFO | awk '{print $11}')
else
	SDPATH=$SDINFO
fi
# we may now have an SDPATH, let's make sure its on mmcblkX or mmcblkXp1
CHECK_SDPATH1=$(echo $SDPATH | grep mmcblk.$)
CHECK_SDPATH2=$(echo $SDPATH | grep mmcblk.p1$)
if [ -z "$CHECK_SDPATH1" ]
then
	if [ -z "$CHECK_SDPATH2" ]
	then
		echo fail1
		unset SDPATH
	else
		LEN=${#SDPATH}
		BLKLEN=$(expr $LEN - 2)
		SDPATH=${SDPATH:0:$BLKLEN}
	fi
fi


FATSIZE=
FATTYPE="fat32"
FATPATH=$SDPATH"p1"

EXTSIZE=512
EXTFS="ext2"
EXTPATH=$SDPATH"p2"
EXTEND=

SWAPSIZE=32
SWAPTYPE="linux-swap"
SWAPPATH=$SDPATH"p3"
SWAPEND=

CMPARTED="/sbin/parted"
CMTUNE2FS="/sbin/tune2fs"
CME2FSCK="/sbin/e2fsck"

# give the output some breathing room
echo "$SCRIPTREV" >> "$LOGFILE" 
echo

# check for arguments
while [ $# -gt 0 ] ; do
  case "$1" in

    -h|--help) ShowHelp ; exit 0 ;;
    
    -fs|--fatsize) shift ; ValidateSizeArg "$1" ; FATSIZE="$FUNC_RET" ; CREATEPART="$1" ;;
    -es|--extsize) shift ; ValidateSizeArg "$1" ; EXTSIZE="$FUNC_RET" ; CREATEPART="$1" ;;
	-ss|--swapsize) shift ; ValidateSizeArg "$1" ; SWAPSIZE="$FUNC_RET" ; CREATEPART="$1" ;;
	-efs|--extfs) shift ; ValidateExtArg "$1" ; EXTFS="$FUNC_RET" ; CREATEPART="$1" ;;
	
	-ufs|--upgradefs) shift ; Validat0)